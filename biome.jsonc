{
  // Biome documentation link: https://biomejs.dev/linter/rules/
  "$schema": "https://biomejs.dev/schemas/2.0.4/schema.json",
  "vcs": {
    "clientKind": "git",
    "enabled": false,
    "useIgnoreFile": false
  },
  "files": {
    "ignoreUnknown": false,
    "includes": ["**", "!dist", "!node_modules", "!public"]
  },
  "formatter": {
    "attributePosition": "auto",
    "enabled": true,
    "formatWithErrors": true,
    "indentStyle": "tab",
    "indentWidth": 2,
    "lineEnding": "lf",
    "lineWidth": 100
  },
  "assist": { "actions": { "source": { "organizeImports": "on" } } },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      "complexity": {
        "noExcessiveCognitiveComplexity": "error",
        "noStaticOnlyClass": "error",
        "noUselessStringConcat": "error",
        "noUselessSwitchCase": "error",
        "noUselessUndefinedInitialization": "error",
        "noVoid": "error",
        "useDateNow": "error",
        "useFlatMap": "error",
        "useSimplifiedLogicExpression": "error",
        "noArguments": "error",
        "noCommaOperator": "error",
        "noUselessEscapeInRegex": "error"
      },
      "correctness": {
        "noNodejsModules": "warn", // Warn against using Node.js builtin modules
        "noUndeclaredDependencies": "error",
        "noUndeclaredVariables": "error",
        "noUnusedFunctionParameters": "error",
        "noUnusedImports": "off",
        "noUnusedPrivateClassMembers": "error",
        "noUnusedVariables": "warn",
        "useIsNan": "error"
      },
      "style": {
        "noDefaultExport": "error",
        "noDoneCallback": "error",
        "noNamespace": "error",
        "noNegationElse": "error",
        "noParameterAssign": "error",
        "noParameterProperties": "warn",
        "noRestrictedGlobals": "warn",
        "noShoutyConstants": "error",
        "noUnusedTemplateLiteral": "error",
        "noUselessElse": "error",
        "noYodaExpression": "error",
        "useAsConstAssertion": "info",
        "useBlockStatements": "error",
        "useCollapsedElseIf": "error",
        "useConsistentArrayType": {
          "fix": "safe",
          "level": "error",
          "options": {
            "syntax": "shorthand"
          }
        },
        "useConsistentBuiltinInstantiation": "error",
        "useConst": "error",
        "useDefaultParameterLast": "error",
        "useDefaultSwitchClause": "error",
        "useEnumInitializers": "error",
        "useExplicitLengthCheck": "error",
        "useExponentiationOperator": "error",
        "useExportType": "error",
        "useFilenamingConvention": {
          "level": "error",
          "options": {
            "strictCase": false,
            "requireAscii": true,
            "filenameCases": ["camelCase", "PascalCase", "export"]
          }
        },
        "useForOf": "warn",
        "useFragmentSyntax": "error",
        "useImportType": "info",
        "useLiteralEnumMembers": "error",
        "useNamingConvention": "warn",
        "useNodejsImportProtocol": "error",
        "useNumberNamespace": "error",
        "useSelfClosingElements": "error",
        "useShorthandAssign": "error",
        "useShorthandFunctionType": "error",
        "useSingleVarDeclarator": "error",
        "useTemplate": "error",
        "useThrowNewError": "warn",
        "useThrowOnlyError": "info",
        "noInferrableTypes": "error",
        "useArrayLiterals": "off",
        "noCommonJs": "warn",
        "noExportedImports": "warn",
        "noNestedTernary": "error",
        "noProcessEnv": "warn",
        "useAtIndex": "warn",
        "useCollapsedIf": "error",
        "useConsistentCurlyBraces": "error" // Enforce consistent use of curly braces in JSX attributes and children
      },
      "suspicious": {
        "noConsole": "error",
        "noDoubleEquals": "error",
        "noDuplicateClassMembers": "error",
        "noEmptyBlockStatements": "warn",
        "noEvolvingTypes": "error",
        "noExplicitAny": "warn",
        "noMisplacedAssertion": "error", // Prevents misplacing assertion functions outside of test blocks
        "noSkippedTests": "warn",
        "noThenProperty": "error",
        "useAwait": "error",
        "useErrorMessage": "info",
        "useIsArray": "error",
        "useNumberToFixedDigitsArgument": "error", // Enforce providing digits argument in toFixed(),
        "noDuplicateElseIf": "error",
        "noIrregularWhitespace": "error",
        "noTemplateCurlyInString": "error"
      },
      "nursery": {
        "noSecrets": "error" // Disallow usage of sensitive data such as API keys and tokens
      },
      "performance": {
        "noBarrelFile": "error",
        "noReExportAll": "error",
        "useTopLevelRegex": "warn", // Require regex literals to be declared at the top level,
        "noNamespaceImport": "warn",
        "noDynamicNamespaceImportAccess": "warn"
      },
      "a11y": {
        "noStaticElementInteractions": "error",
        "useAriaPropsSupportedByRole": "error"
      }
    }
  },
  "javascript": {
    "formatter": {
      "arrowParentheses": "asNeeded",
      "attributePosition": "auto",
      "indentStyle": "tab",
      "indentWidth": 2,
      "jsxQuoteStyle": "double",
      "lineEnding": "lf",
      "lineWidth": 100,
      "quoteStyle": "single",
      "semicolons": "always",
      "trailingCommas": "none"
    }
  },
  "json": {
    "parser": {
      "allowComments": false,
      "allowTrailingCommas": false
    },
    "formatter": {
      "indentStyle": "tab",
      "indentWidth": 2,
      "lineEnding": "lf",
      "lineWidth": 100,
      "trailingCommas": "none"
    }
  }
}

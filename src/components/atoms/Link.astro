---
import type { Polymorphic } from 'astro/types';

export interface Props {
  /**
   * The visual style of the link.
   * 'primary' uses the main accent color. 'subtle' is less prominent.
   * @default 'primary'
   */
  variant?: 'primary' | 'subtle';
  /**
   * A type-safe path for an INTERNAL page route.
   */
  to?: string;
  /**
   * A standard URL for EXTERNAL links (e.g., https://google.com).
   */
  href?: string;
}

type ComponentProps = Polymorphic<{ as: 'a' }> & Props;

const {
  variant = 'primary',
  to,
  href,
  ...attrs
} = Astro.props as ComponentProps;

// Determine the final URL and check if it's an external link
const finalHref = to || href;
const isExternal = href?.startsWith('http');


if (!finalHref) {
  throw new Error('[Link] requires either a `to` or `href` prop.');
}

if (to && href) {
  throw new Error('[Link] cannot have both `to` and `href` props.');
}
---

<a
  href={finalHref}
  data-variant={variant}
  {...isExternal ? { target: '_blank', rel: 'noopener noreferrer' } : {}}
  {...attrs}
>
  <slot />
</a>

<style>
  a {
    font-weight: var(--font-weight-medium);
    text-decoration: none;
    transition: color 0.2s ease;
  }


  [data-variant="primary"] {
    color: var(--color-accent);
  }

  [data-variant="primary"]:hover {
    color: var(--color-content);
  }

  [data-variant="subtle"] {
    color: var(--color-subtle);
  }

  [data-variant="subtle"]:hover {
    color: var(--color-subtle);
  }
</style>